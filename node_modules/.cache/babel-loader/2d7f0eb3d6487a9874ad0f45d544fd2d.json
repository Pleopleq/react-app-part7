{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\FULL\\\\Documents\\\\WebDev\\\\reactFullStackOpen\\\\part7\\\\src\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nconst api_key = process.env.REACT_APP_API_KEY;\n\nconst PrintWeatherOfCountry = ({\n  name,\n  temperature,\n  icon\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 5\n    }\n  }, \"Weather in: \", name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 8\n    }\n  }, \"Temperature:\"), \" \", temperature, \"\\xB0 Celcius\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: icon,\n    width: 120,\n    alt: 'Icon of weather',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 3\n    }\n  }));\n};\n\nconst PrintListOfCountries = ({\n  name,\n  warning,\n  index,\n  getOne\n}) => {\n  if (warning) {\n    return /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 12\n      }\n    }, warning);\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, name, \"  \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: getOne,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 32\n      }\n    }, \"Show\")));\n  }\n};\n\nconst PrintCountry = ({\n  name,\n  capital,\n  population,\n  flag,\n  language,\n  index\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }\n  }, \"Capital: \", capital), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, \"Population: \", population), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, \"Languages\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, language.map((element, index) => {\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 14\n      }\n    }, element.name);\n  })), /*#__PURE__*/React.createElement(\"img\", {\n    src: flag,\n    width: 240,\n    alt: 'country flag',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(PrintWeatherOfCountry, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst App = () => {\n  const [countries, setContries] = useState([]);\n  const [newSearch, setNewSearch] = useState('');\n  const [selectedCountry, setSelectedCountry] = useState([]);\n  const [getCountryNameWeather, setCountryNameWeather] = useState([]);\n  const [getWeather, setWeather] = useState([]);\n\n  const handleSearchBarChange = event => {\n    setNewSearch(event.target.value);\n    setSelectedCountry([]);\n  };\n\n  const handleShowClick = event => {\n    const name = event.target.parentNode.innerText.replace('Show', ''); //Single country api call\n\n    axios.get(`https://restcountries.eu/rest/v2/name/${name}`).then(response => {\n      setSelectedCountry(response.data);\n    }); //Weather of single country api call\n\n    axios.get(`http://api.weatherstack.com/current?access_key=${api_key}&query=${name}`).then(response => {\n      setCountryNameWeather(response.data.location);\n      setWeather(response.data.current);\n    });\n  };\n\n  const formatSearchInput = () => {\n    const countryToSearch = newSearch;\n    const copyOfContries = countries;\n    let countryToSearchToUpper = ''; //Make the first letter of the search query uppercase\n\n    if (countryToSearch !== '') {\n      countryToSearchToUpper = countryToSearch.charAt(0).toUpperCase() + countryToSearch.substring(1);\n    }\n\n    let searchBarInput = copyOfContries.filter(el => el.name.includes(countryToSearchToUpper)); //Set the countries array to an empty array to prevent to print all\n    //the contries at once\n\n    if (countryToSearch === '') {\n      searchBarInput = [];\n    }\n\n    if (searchBarInput.length > 10) {\n      searchBarInput = [{\n        warning: 'Woops, too many matches. Be more specific'\n      }];\n    }\n\n    return searchBarInput;\n  };\n\n  useEffect(() => {\n    axios.get('https://restcountries.eu/rest/v2/all').then(response => {\n      setContries(response.data);\n      console.log(response.data);\n    });\n  }, []);\n\n  const ViewControl = ({\n    selected\n  }) => {\n    let searchBar = formatSearchInput();\n\n    if (selected.length === 1) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 5\n        }\n      }, selectedCountry.map((country, index) => /*#__PURE__*/React.createElement(PrintCountry, {\n        name: country.name,\n        capital: country.capital,\n        population: country.population,\n        flag: country.flag,\n        language: country.languages,\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 7\n        }\n      })), /*#__PURE__*/React.createElement(PrintWeatherOfCountry, {\n        name: getCountryNameWeather.country,\n        temperature: getWeather.temperature,\n        icon: getWeather.weather_icons,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 6\n        }\n      }));\n    }\n\n    return searchBar.map((country, index) => /*#__PURE__*/React.createElement(PrintListOfCountries, {\n      name: country.name,\n      key: index,\n      warning: country.warning,\n      getOne: handleShowClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 5\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, \"find countries \", /*#__PURE__*/React.createElement(\"input\", {\n    value: newSearch,\n    onChange: handleSearchBarChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(ViewControl, {\n    selected: selectedCountry,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/FULL/Documents/WebDev/reactFullStackOpen/part7/src/index.js"],"names":["React","useState","useEffect","ReactDOM","axios","api_key","process","env","REACT_APP_API_KEY","PrintWeatherOfCountry","name","temperature","icon","PrintListOfCountries","warning","index","getOne","PrintCountry","capital","population","flag","language","map","element","App","countries","setContries","newSearch","setNewSearch","selectedCountry","setSelectedCountry","getCountryNameWeather","setCountryNameWeather","getWeather","setWeather","handleSearchBarChange","event","target","value","handleShowClick","parentNode","innerText","replace","get","then","response","data","location","current","formatSearchInput","countryToSearch","copyOfContries","countryToSearchToUpper","charAt","toUpperCase","substring","searchBarInput","filter","el","includes","length","console","log","ViewControl","selected","searchBar","country","languages","weather_icons","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }  from 'react';\nimport ReactDOM from 'react-dom';\nimport axios from 'axios';\nconst api_key = process.env.REACT_APP_API_KEY;\n\nconst PrintWeatherOfCountry = ({name, temperature, icon}) =>{\n  return (\n  <div>\n    <h1>Weather in: {name}</h1>\n    <p><strong>Temperature:</strong> {temperature}° Celcius</p>\n  <img src={icon} width={120} alt={'Icon of weather'}></img>\n  </div>\n  )\n}\n\nconst PrintListOfCountries = ({name, warning, index, getOne}) =>{\n  if(warning){\n    return <h1>{warning}</h1>\n  } else {\n    return (\n      <div>\n        <p key={index}>{name}  <button onClick={getOne}>Show</button></p>\n      </div>\n    )\n  }\n}\n\nconst PrintCountry = ({name, capital, population, flag, language, index}) =>{\n  return (\n  <div>\n    <h1 key={index}>{name}</h1>\n    <p>Capital: {capital}</p> \n    <p>Population: {population}</p>\n    <h2>Languages</h2>\n    <ul>\n    {language.map((element, index) => {\n      return <li key={index}>{element.name}</li>\n    })}\n    </ul>\n    <img src={flag} width={240} alt={'country flag'}></img>\n    <PrintWeatherOfCountry/>\n  </div>\n  ) \n}\n\nconst App = () => {\n  const [countries, setContries] = useState([]);\n  const [newSearch, setNewSearch] = useState('');\n  const [selectedCountry, setSelectedCountry] = useState([]);\n  const [getCountryNameWeather, setCountryNameWeather] = useState([]);\n  const [getWeather, setWeather] = useState([]);\n\n  const handleSearchBarChange = event =>{\n    setNewSearch(event.target.value);\n    setSelectedCountry([]);\n  }\n\n  const handleShowClick = (event) =>{\n    const name = event.target.parentNode.innerText.replace('Show','');\n    //Single country api call\n    axios\n    .get(`https://restcountries.eu/rest/v2/name/${name}`)\n    .then(response => {\n      setSelectedCountry(response.data);\n    })\n    //Weather of single country api call\n    axios.get(`http://api.weatherstack.com/current?access_key=${api_key}&query=${name}`)\n    .then(response =>{\n      setCountryNameWeather(response.data.location);\n      setWeather(response.data.current);\n    })\n  }\n\n  const formatSearchInput =  () =>{\n    const countryToSearch = newSearch;\n    const copyOfContries = countries;\n    let countryToSearchToUpper = '';\n  \n    //Make the first letter of the search query uppercase\n    if(countryToSearch !== ''){\n      countryToSearchToUpper = countryToSearch.charAt(0).toUpperCase() + countryToSearch.substring(1);\n    }\n\n    let  searchBarInput = copyOfContries.filter(el => el.name.includes(countryToSearchToUpper));\n    //Set the countries array to an empty array to prevent to print all\n    //the contries at once\n    if(countryToSearch === ''){\n      searchBarInput = [];\n    }\n\n    if(searchBarInput.length > 10){\n      searchBarInput = [{ warning: 'Woops, too many matches. Be more specific'}]\n    }   \n\n  return searchBarInput\n  }\n\n  useEffect(() => {\n    axios\n    .get('https://restcountries.eu/rest/v2/all')\n    .then(response => {\n      setContries(response.data)\n      console.log(response.data)\n    })\n  },[])\n\n  const ViewControl = ({selected}) =>{\n    let searchBar = formatSearchInput();\n\n    if(selected.length === 1){\n    return(\n    <div>\n      {\n    selectedCountry.map((country, index) =>  \n      <PrintCountry \n        name={country.name} \n        capital={country.capital} \n        population={country.population} \n        flag={country.flag}\n        language={country.languages}\n        key={index}>\n      </PrintCountry>\n    )\n    }\n    {<PrintWeatherOfCountry \n      name={getCountryNameWeather.country}\n      temperature={getWeather.temperature}\n      icon={getWeather.weather_icons}\n      >\n      </PrintWeatherOfCountry>\n      }\n    </div>\n    ) \n  }\n \n  return searchBar.map((country, index) => \n    <PrintListOfCountries\n      name={country.name} \n      key={index}\n      warning={country.warning}\n      getOne={handleShowClick}>\n    </PrintListOfCountries>\n    )\n  }\n\n  return ( \n  <div>  \n      <p>find countries <input \n      value={newSearch}\n      onChange={handleSearchBarChange}/>\n      </p>\n      <ViewControl selected={selectedCountry}/>\n  </div>\n  )\n}\n\nReactDOM.render(\n    <App/>,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}